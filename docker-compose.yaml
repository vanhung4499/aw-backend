version: '3.8'

services:
  api:
    container_name: api
    image: api:latest
    build:
      context: .
      args:
        NODE_ENV: ${NODE_ENV:-development}
        API_BASE_URL: ${API_BASE_URL:-http://localhost:3000}
        CLIENT_BASE_URL: ${CLIENT_BASE_URL:-http://localhost:4200}
    env_file:
      - .env
    volumes:
      - ./:/usr/src/app
    environment:
      API_HOST: ${API_HOST:-api}
      API_PORT: ${API_PORT:-3000}
      NODE_ENV: ${NODE_ENV:-development}
      DB_HOST: db
      API_BASE_URL: ${API_BASE_URL:-http://localhost:3000}
      CLIENT_BASE_URL: ${CLIENT_BASE_URL:-http://localhost:4200}
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    links:
      - db:${DB_HOST:-db}
      - redis:${REDIS_HOST:-redis}
    ports:
      - '3000:${API_PORT:-3000}'
    networks:
      - overlay

  db:
    image: postgres:15-alpine
    container_name: db
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME:-aw}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASS:-root}
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'psql postgres://$${POSTGRES_USER}:$${POSTGRES_PASSWORD}@localhost:5432/$${POSTGRES_DB} || exit 1',
        ]
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./.deploy/db/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
    ports:
      - '5432:5432'
    networks:
      - overlay

  redis:
    image: 'redis:7.0.2-alpine'
    container_name: redis
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD-SHELL', 'redis-cli -h localhost -p 6379 PING' ]
      interval: 1s
      timeout: 30s
    ports:
      - '6379:6379'
    volumes:
      - ./.deploy/redis/data:/data
    networks:
      - overlay

volumes:
  # webapp_node_modules:
  # api_node_modules:
  redis_data: {}
  postgres_data: {}

networks:
  overlay:
    driver: bridge